// 2. ConvertAPI Service yang diperbaiki
import ConvertAPI from 'convertapi';
import { join } from 'path';
import { promises as fs } from 'fs';

export class ConvertApiService {
  private api: ConvertAPI;

  constructor() {
    // Pastikan API key sudah diset
    if (!process.env.CONVERTAPI_SECRET_KEY) {
      throw new Error('CONVERT_API_SECRET is required');
    }
    this.api = new ConvertAPI(process.env.CONVERTAPI_SECRET_KEY);
  }

  async pptToPng(inputPath: string, outputDir: string): Promise<string[]> {
    try {
      await fs.mkdir(outputDir, { recursive: true });

      console.log('Converting PPT to PNG:', inputPath);

      // Pastikan file exists
      try {
        await fs.access(inputPath);
      } catch (error) {
        throw new Error(`Input file does not exist: ${inputPath}`);
      }

      // Convert dengan ConvertAPI
      const result = await this.api.convert('png', {
        File: inputPath,
        ImageResolution: 150, // DPI untuk kualitas gambar
        ImageFormat: 'png'
      }, 'pptx'); // atau 'ppt' sesuai format asli

      if (!result.files) {
        throw new Error('No slides were converted');
      }

      const slidePaths: string[] = [];

      // Simpan setiap slide
      for (let i = 0; i < result.files.length; i++) {
        const fileName = `slide-${String(i + 1).padStart(3, '0')}.png`;
        const outPath = join(outputDir, fileName);
        
        // Simpan file dari ConvertAPI result
        await result.files[i].save(outPath);
        slidePaths.push(outPath);
        
        console.log(`Saved slide ${i + 1} to: ${outPath}`);
      }

      console.log(`Successfully converted ${slidePaths.length} slides`);
      return slidePaths;

    } catch (error) {
      console.error('ConvertAPI Error:', error);
      
      // Cleanup output directory jika ada error
      try {
        const files = await fs.readdir(outputDir);
        await Promise.all(files.map(file => fs.unlink(join(outputDir, file))));
        await fs.rmdir(outputDir);
      } catch (cleanupError) {
        console.error('Cleanup error:', cleanupError);
      }
      
      throw new Error(`Failed to convert PPT to PNG: ${error.message || error}`);
    }
  }

  // Alternative method menggunakan LibreOffice jika ConvertAPI tidak work
  async pptToPngWithLibreOffice(inputPath: string, outputDir: string): Promise<string[]> {
    const { exec } = require('child_process');
    const { promisify } = require('util');
    const execAsync = promisify(exec);

    try {
      await fs.mkdir(outputDir, { recursive: true });

      // Convert dengan LibreOffice headless
      const command = `libreoffice --headless --convert-to png --outdir "${outputDir}" "${inputPath}"`;
      
      console.log('Executing LibreOffice command:', command);
      const { stdout, stderr } = await execAsync(command);
      
      if (stderr) {
        console.error('LibreOffice stderr:', stderr);
      }

      // Baca file hasil konversi
      const files = await fs.readdir(outputDir);
      const pngFiles = files.filter(file => file.endsWith('.png'));
      
      if (pngFiles.length === 0) {
        throw new Error('No PNG files generated by LibreOffice');
      }

      // Return full paths
      return pngFiles.map(file => join(outputDir, file));

    } catch (error) {
      throw new Error(`LibreOffice conversion failed: ${error.message}`);
    }
  }
}